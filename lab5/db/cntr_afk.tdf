--lpm_counter CBX_DECLARE_ALL_CONNECTED_PORTS="OFF" DEVICE_FAMILY="Stratix II" lpm_avalue=3 lpm_direction="DOWN" lpm_port_updown="PORT_UNUSED" lpm_width=3 aload aset clock data q CARRY_CHAIN="MANUAL" CARRY_CHAIN_LENGTH=48
--VERSION_BEGIN 9.1 cbx_cycloneii 2009:10:21:21:22:16:SJ cbx_lpm_add_sub 2009:10:21:21:22:16:SJ cbx_lpm_compare 2009:10:21:21:22:16:SJ cbx_lpm_counter 2009:10:21:21:22:16:SJ cbx_lpm_decode 2009:10:21:21:22:16:SJ cbx_mgl 2009:10:21:21:37:49:SJ cbx_stratix 2009:10:21:21:22:16:SJ cbx_stratixii 2009:10:21:21:22:16:SJ  VERSION_END


-- Copyright (C) 1991-2009 Altera Corporation
--  Your use of Altera Corporation's design tools, logic functions 
--  and other software and tools, and its AMPP partner logic 
--  functions, and any output files from any of the foregoing 
--  (including device programming or simulation files), and any 
--  associated documentation or information are expressly subject 
--  to the terms and conditions of the Altera Program License 
--  Subscription Agreement, Altera MegaCore Function License 
--  Agreement, or other applicable license agreement, including, 
--  without limitation, that your use is for the sole purpose of 
--  programming logic devices manufactured by Altera and sold by 
--  Altera or its authorized distributors.  Please refer to the 
--  applicable agreement for further details.


FUNCTION stratixii_lcell_comb (cin, dataa, datab, datac, datad, datae, dataf, datag, sharein)
WITH ( EXTENDED_LUT, LUT_MASK, SHARED_ARITH)
RETURNS ( combout, cout, shareout, sumout);
FUNCTION stratixii_lcell_ff (aclr, adatasdata, aload, clk, datain, ena, sclr, sload)
WITH ( x_on_violation)
RETURNS ( regout);

--synthesis_resources = lut 3 reg 3 
OPTIONS ALTERA_INTERNAL_OPTION = "suppress_da_rule_internal=a101;suppress_da_rule_internal=s102;suppress_da_rule_internal=s103";

SUBDESIGN cntr_afk
( 
	aload	:	input;
	aset	:	input;
	clock	:	input;
	data[2..0]	:	input;
	q[2..0]	:	output;
) 
VARIABLE 
	counter_comb_bita0 : stratixii_lcell_comb
		WITH (
			EXTENDED_LUT = "off",
			LUT_MASK = "000000000000FF00",
			SHARED_ARITH = "off"
		);
	counter_comb_bita1 : stratixii_lcell_comb
		WITH (
			EXTENDED_LUT = "off",
			LUT_MASK = "0000FF000000FF00",
			SHARED_ARITH = "off"
		);
	counter_comb_bita2 : stratixii_lcell_comb
		WITH (
			EXTENDED_LUT = "off",
			LUT_MASK = "0000FF000000FF00",
			SHARED_ARITH = "off"
		);
	counter_reg_bit1a[2..0] : stratixii_lcell_ff;
	a_data[2..0]	: WIRE;
	a_val[2..0]	: WIRE;
	aclr	: NODE;
	aclr_actual	: WIRE;
	clk_en	: NODE;
	cnt_en	: NODE;
	effective_clrn[2..0]	: WIRE;
	effective_prn[2..0]	: WIRE;
	external_cin	: WIRE;
	latch_signal[2..0]	: WIRE;
	lsb_cin	: WIRE;
	pre_hazard[2..0]	: WIRE;
	pre_latch_signal[2..0]	: WIRE;
	s_val[2..0]	: WIRE;
	safe_q[2..0]	: WIRE;
	sclr	: NODE;
	sload	: NODE;
	sset	: NODE;
	updown_dir	: WIRE;
	updown_lsb	: WIRE;
	updown_other_bits	: WIRE;

BEGIN 
	counter_comb_bita[2..0].cin = ( counter_comb_bita[1..0].cout, lsb_cin);
	counter_comb_bita[2..0].datad = ( ((! latch_signal[2..2]) $ counter_reg_bit1a[2].regout), ((! latch_signal[1..1]) $ counter_reg_bit1a[1].regout), ((! latch_signal[0..0]) $ counter_reg_bit1a[0].regout));
	counter_comb_bita[2..0].dataf = ( updown_other_bits, updown_other_bits, updown_lsb);
	counter_reg_bit1a[].aclr = aclr_actual;
	counter_reg_bit1a[].adatasdata = ((! latch_signal[]) $ ((! sclr) & ((sset & s_val[]) # ((! sset) & data[]))));
	counter_reg_bit1a[].clk = clock;
	counter_reg_bit1a[].datain = ( ((! latch_signal[2..2]) $ counter_comb_bita[2].sumout), ((! latch_signal[1..1]) $ counter_comb_bita[1].sumout), ((! latch_signal[0..0]) $ counter_comb_bita[0].sumout));
	counter_reg_bit1a[].ena = (clk_en & (((cnt_en # sclr) # sset) # sload));
	counter_reg_bit1a[].sload = ((sclr # sset) # sload);
	a_data[] = ((aset & a_val[]) # ((! aset) & data[]));
	a_val[] = B"011";
	aclr = GND;
	aclr_actual = ((aclr # aset) # aload);
	clk_en = VCC;
	cnt_en = VCC;
	effective_clrn[] = (! (aclr # ((! a_data[]) & (aload # aset))));
	effective_prn[] = (! ((aload # aset) & a_data[]));
	external_cin = B"1";
	latch_signal[] = ((! effective_clrn[]) # pre_latch_signal[]);
	lsb_cin = B"0";
	pre_hazard[] = counter_reg_bit1a[].regout;
	pre_latch_signal[] = (effective_prn[] & latch_signal[]);
	q[] = safe_q[];
	s_val[] = B"111";
	safe_q[] = ((((pre_hazard[] & latch_signal[]) & effective_clrn[]) # (((! latch_signal[]) & (! pre_hazard[])) & effective_clrn[])) # ((! aclr) & (! effective_prn[])));
	sclr = GND;
	sload = GND;
	sset = GND;
	updown_dir = B"0";
	updown_lsb = updown_dir;
	updown_other_bits = ((! external_cin) # updown_dir);
	ASSERT (0) 
	REPORT "Counter will power up to an undefined state.  An asynchronous signal should be asserted before the counter reaches a known state."
	SEVERITY WARNING;
END;
--VALID FILE
